#!/usr/bin/env python

# Copyright (c) 2016 Adam Karpierz
# SPDX-License-Identifier: BSD-3-Clause

# Copyright (c) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000
#  The Regents of the University of California.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that: (1) source code distributions
# retain the above copyright notice and this paragraph in its entirety, (2)
# distributions including binary code include the above copyright notice and
# this paragraph in its entirety in the documentation or other materials
# provided with the distribution, and (3) all advertising materials mentioning
# features or use of this software display the following acknowledgement:
# ``This product includes software developed by the University of California,
# Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
# the University nor the names of its contributors may be used to endorse
# or promote products derived from this software without specific prior
# written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import sys
import os
import getopt
import ctypes as ct

import libpcap as pcap
from pcaptestutils import *  # noqa

#ifndef lint
copyright = "@(#) Copyright (c) 1988, 1989, 1990, 1991, 1992, 1993, 1994, "\
            "1995, 1996, 1997, 2000\n"\
            "The Regents of the University of California.  "\
            "All rights reserved.\n"
#endif

pd = ct.POINTER(pcap.pcap_t)()

if is_windows:
    THREAD_FUNC_ARG_TYPE    = win32.LPVOID
    THREAD_FUNC_RETURN_TYPE = win32.DWORD
else:
    THREAD_FUNC_ARG_TYPE    = ct.c_void_p
    THREAD_FUNC_RETURN_TYPE = ct.c_void_p

if not is_windows:

    # void catch_sigusr1(int sig _U_)
    def catch_sigusr1(sig):
        print("Got SIGUSR1")


#static
@win32.LPTHREAD_START_ROUTINE
def capture_thread_func(arg: THREAD_FUNC_ARG_TYPE) -> THREAD_FUNC_RETURN_TYPE:
    """ """
    global pd
    global program_name

    device = ct.cast(arg, ct.c_char_p).value

    if not is_windows:
        action = sigaction()
        mask = sigset_t()
        sigemptyset(ct.byref(mask))
        action.sa_handler = catch_sigusr1
        action.sa_mask    = mask
        action.sa_flags   = 0
        if sigaction(SIGUSR1, ct.byref(action), NULL) == -1:
            error("Can't catch SIGUSR1: {}", strerror(errno))

    print("Listening on {}".format(device2str(device)))

    while True:
        packet_count = ct.c_int(0)
        status = pcap.dispatch(pd, -1, countme,
            ct.cast(ct.pointer(packet_count), ct.POINTER(ct.c_ubyte)))
        if status < 0:
            break
        if status != 0:
            print("{:d} packets seen, {:d} packets counted after "
                  "pcap.dispatch returns".format(status, packet_count.value))
        else:
            print("No packets seen by pcap.dispatch")

    if status == pcap.PCAP_ERROR_BREAK:
        # We got interrupted, so perhaps we didn't manage to finish a
        # line we were printing. Print an extra newline, just in case.
        print()
        print("Loop got broken")
    sys.stdout.flush()
    if status == pcap.PCAP_ERROR:
        # Error.  Report it.
        print("{}: pcap.dispatch: {}".format(program_name, geterr2str(pd),
              file=sys.stderr))

    return THREAD_FUNC_RETURN_TYPE(0)


def main(argv=sys.argv[1:]):

    global program_name
    program_name = os.path.basename(sys.argv[0])

    try:
        opts, args = getopt.getopt(argv, "i:n")
    except getopt.GetoptError:
        usage()

    device = None
    do_wakeup = True
    for opt, optarg in opts:
        if opt == '-i':
            device = optarg.encode("utf-8")
        elif opt == '-n':
            do_wakeup = False
        else:
            usage()

    expression = args

    ebuf = ct.create_string_buffer(pcap.PCAP_ERRBUF_SIZE)

    if device is None:
        devlist = ct.POINTER(pcap.pcap_if_t)()
        if pcap.findalldevs(ct.byref(devlist), ebuf) == -1:
            error("{}", ebuf2str(ebuf))
        if not devlist:
            error("no interfaces available for capture")
        device = devlist[0].name
        pcap.freealldevs(devlist)

    ebuf[0] = b"\0"

    pd = pcap.create(device, ebuf)
    if not pd:
        error("{}", ebuf2str(ebuf))

    status = pcap.set_snaplen(pd, 65535)
    if status != 0:
        error("{}: pcap.set_snaplen failed: {}",
              device2str(device), status2str(status))
    status = pcap.set_timeout(pd, 5 * 60 * 1000)
    if status != 0:
        error("{}: pcap.set_timeout failed: {}",
              device2str(device), status2str(status))

    status = pcap.activate(pd)
    if status < 0:
        # pcap.activate() failed.
        error("{}: {}\n({})",
              device2str(device), status2str(status), geterr2str(pd))
    elif status > 0:
        # pcap.activate() succeeded, but it's warning us
        # of a problem it had.
        warning("{}: {}\n({})",
                device2str(device), status2str(status), geterr2str(pd))

    localnet = pcap.bpf_u_int32()
    netmask  = pcap.bpf_u_int32()
    if pcap.lookupnet(device, ct.byref(localnet), ct.byref(netmask), ebuf) < 0:
        localnet = pcap.bpf_u_int32(0)
        netmask  = pcap.bpf_u_int32(0)
        warning("{}", ebuf2str(ebuf))

    fcode = pcap.bpf_program()
    cmdbuf = " ".join(expression).encode("utf-8")
    if pcap.compile(pd, ct.byref(fcode), cmdbuf, 1, netmask) < 0:
        error("{}", geterr2str(pd))

    if pcap.setfilter(pd, ct.byref(fcode)) < 0:
        error("{}", geterr2str(pd))

    if is_windows:
        capture_thread = win32.CreateThread(None, 0,
                                            capture_thread_func, device,
                                            0, None)
        if not capture_thread:
            status = win32.GetLastError()
            error("Can't create capture thread: {}", strerror(status))
    else:
        capture_thread = pthread_t()
        status = pthread_create(ct.byref(capture_thread), NULL,
                                capture_thread_func, device)
        if status != 0:
            error("Can't create capture thread: {}", strerror(status))
    sleep_secs(60)

    print("Doing pcap.breakloop()")
    pcap.breakloop(pd)
    if do_wakeup:
        # Force a wakeup in the capture thread.
        #
        # On some platforms, with some devices, pcap.breakloop()
        # can't do that itself.  On Windows, poke the device's
        # event handle; on UN*X, send a SIGUSR1 to the thread.
        if is_windows:
            print("Setting event")
            if not win32.SetEvent(pcap.getevent(pd)):
                status = win32.GetLastError()
                error("Can't set event for pcap_t: {}", strerror(status))
        else:
            print("Sending SIGUSR1")
            status = pthread_kill(capture_thread, SIGUSR1)
            if status != 0:
                warning("Can't interrupt capture thread: {}", strerror(status))

    # Now wait for the capture thread to terminate.
    if is_windows:
        if win32.WaitForSingleObject(capture_thread,
                                     win32.INFINITE) == win32.WAIT_FAILED:
            status = win32.GetLastError()
            error("Wait for thread termination failed: {}", strerror(status))
        win32.CloseHandle(capture_thread)
    else:
        retval = ct.c_void_p()
        status = pthread_join(capture_thread, ct.byref(retval))
        if status != 0:
            error("Wait for thread termination failed: {}", strerror(status))

    pcap.freecode(ct.byref(fcode))
    pcap.close(pd)

    return 1 if status == -1 else 0


@pcap.pcap_handler
def countme(arg, hdr, pkt):
    counterp = ct.cast(arg, ct.POINTER(ct.c_int))
    counterp[0] += 1


def usage():
    print("Usage: {} [ -n ] [ -i interface ] "
          "[ expression ]".format(program_name), file=sys.stderr)
    sys.exit(1)


if __name__.rpartition(".")[-1] == "__main__":
    sys.exit(main())
