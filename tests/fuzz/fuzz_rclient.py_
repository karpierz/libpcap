#!/usr/bin/env python

# Copyright (c) 2016 Adam Karpierz
# Licensed under the BSD license
# https://opensource.org/license/bsd-3-clause

#include <fcntl.h>
#include <errno.h>

import ctypes as ct

import libpcap as pcap
void sock_initfuzz(const uint8_t *Data, size_t Size);

outfile = None
struct pcap_rmtauth auth;


def fuzz_openFile(name: str):
    global outfile
    if outfile is not None:
        outfile.close()
    outfile = open(name, "wt")
    auth.type = RPCAP_RMTAUTH_PWD
    auth.username = "user"
    auth.password = "pass"


def LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) -> int:

    char errbuf[PCAP_ERRBUF_SIZE];
    const u_char *pkt;
    struct pcap_stat stats;

    # initialization
    if outfile is None:
        fuzz_openFile("/dev/null")

    sock_initfuzz(Data, Size)
    # initialize structure
    pkts = pcap.open("rpcap://127.0.0.1/fuzz.pcap", 0, 0, 1000, &auth, errbuf)
    if not pkts:
        print("Couldn't open pcap file {}".format(errbuf), file=outfile)
        return 0

    # loop over packets
    header = ct.POINTER(pcap_pkthdr)()
    r = pcap.next_ex(pkts, ct.byref(header), &pkt)
    while r > 0:
        print("packet length={}/{}".format(header->caplen, header->len), file=outfile)
        r = pcap.next_ex(pkts, ct.byref(header), &pkt)
    if pcap.stats(pkts, &stats) == 0:
        print("number of packets={}".format(stats.ps_recv), file=outfile)

    # close structure
    pcap.close(pkts)

    return 0
